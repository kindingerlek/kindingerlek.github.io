---
import TOC from '@/components/blog/TOC.astro'
import Button from '@/components/Button.astro'
import type { Config } from '@/types/data'
import FormattedDate from '@/components/FormattedDate.astro'
import ImageSrc from '@/components/ImageSrc.astro'

import PageLayout from './BaseLayout.astro'
import type { PhotographyEntry } from '@/content/config'
import ContentSidePanel from '@/components/blog/ContentSidePanel.astro'

interface Props {
	urlRoot: string
	content: PhotographyEntry
	meta?: Config['meta']
}

const { content, meta, urlRoot } = Astro.props
const { headings, remarkPluginFrontmatter } = await content.render()

const pageMeta = {
	...meta,
	description: content.data.description,
	title: content.data.title,
	articleDate: content.data.publishDate.toISOString(),
	ogImage: content.data.ogImage ?? `/og-image/${content.slug}.png`
} as Config['meta']

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: 'long'
}

const sidePanelVisible = !!content.data.meta || !!headings.length
---

<PageLayout meta={pageMeta}>
	<div class='w-full'>
		<Button title='Back' href=`${urlRoot}` style='button'>
			<svg
				xmlns='http://www.w3.org/2000/svg'
				width='14'
				height='14'
				viewBox='0 0 24 24'
				slot='icon-before'
			>
				<path
					fill='currentColor'
					d='m6.921 12.5l5.792 5.792L12 19l-7-7l7-7l.713.708L6.921 11.5H19v1z'
				>
				</path>
			</svg>
		</Button>
		<div class='mt-8 gap-x-10 lg:flex lg:items-start'>
			<ContentSidePanel visible={sidePanelVisible}>
				{!!headings.length && <TOC headings={headings} />}
				{
					content.data.meta && (
						<div class='mt-8 hidden lg:block'>
							<h2 class='font-semibold'>INFO</h2>
							<div class='prose prose-sm dark:prose-invert'>
								<table class='w-full'>
									<tbody>
										{Object.entries(content.data.meta).map(
											([key, value]) =>
												value && (
													<tr>
														<td class='font-medium text-gray-700 dark:text-gray-300'>{key}</td>
														<td class='text-gray-900 dark:text-gray-100'>{value}</td>
													</tr>
												)
										)}
									</tbody>
								</table>
							</div>
						</div>
					)
				}
			</ContentSidePanel>

			<article class='flex-grow break-words' data-pagefind-body>
				{content.data.draft && <span class='text-red-500'>(Draft)</span>}
				<div class='flex flex-wrap items-center gap-x-3 gap-y-2'>
					<p class='text-xs'>
						<FormattedDate date={content.data.publishDate} dateTimeOptions={dateTimeOptions} /> /{
							' '
						}
						{remarkPluginFrontmatter.minutesRead + 5}
					</p>
				</div>
				<h1 class='mt-2 text-3xl font-medium sm:mb-1'>
					{content.data.title}
				</h1>

				{
					!!content.data.tags?.length && (
						<div class='mt-3 flex flex-row items-center gap-x-1'>
							<svg
								aria-hidden='true'
								class='me-1 inline-block h-6 w-6'
								fill='none'
								focusable='false'
								stroke='currentColor'
								stroke-linecap='round'
								stroke-linejoin='round'
								stroke-width='1.5'
								viewBox='0 0 24 24'
								xmlns='http://www.w3.org/2000/svg'
							>
								<path d='M0 0h24v24H0z' fill='none' stroke='none' />
								<path d='M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z' />
								<path d='M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116' />
								<path d='M6 9h-.01' />
							</svg>
							{content.data.tags.map((tag, i) => (
								<div>
									<a
										aria-label={`View more blogs with the tag ${tag}`}
										class="inline-block before:content-['#'] hover:underline hover:underline-offset-4"
										data-pagefind-filter='tag'
										href={`/tags/${tag}/`}
									>
										{tag}
									</a>
									{i < content.data.tags.length - 1 && ', '}
								</div>
							))}
						</div>
					)
				}

				{
					content.data.updatedDate && (
						<p class='mt-6 text-base'>
							Last Updated:
							<FormattedDate
								class='ms-1'
								date={content.data.updatedDate}
								dateTimeOptions={dateTimeOptions}
							/>
						</p>
					)
				}

				{
					content.data.coverImage && (
						<div class='my-6'>
							<ImageSrc
								alt={content.data.coverImage.alt || ''}
								class='rounded-2xl'
								src={content.data.coverImage.src.src}
							/>
						</div>
					)
				}
				<div
					class='prose prose-base prose-zinc mt-12 text-muted-foreground dark:prose-invert prose-headings:font-medium prose-headings:text-foreground prose-headings:before:absolute prose-headings:before:-ms-4 prose-th:before:content-none'
				>
					<slot />
				</div>
			</article>
		</div>
		<button
			aria-label='Back to Top'
			class='z-90 fixed bottom-8 end-4 flex h-8 w-8 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-primary-foreground text-3xl opacity-0 transition-all duration-300 hover:border-border/75 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 sm:end-8 sm:h-12 sm:w-12'
			data-show='false'
			id='to-top-btn'
			><svg
				aria-hidden='true'
				class='h-4 w-4'
				fill='none'
				focusable='false'
				stroke='currentColor'
				stroke-width='2'
				viewBox='0 0 24 24'
				xmlns='http://www.w3.org/2000/svg'
			>
				<path d='M4.5 15.75l7.5-7.5 7.5 7.5' stroke-linecap='round' stroke-linejoin='round'></path>
			</svg>
		</button>
	</div>
</PageLayout>

<script>
	const scrollBtn = document.getElementById('to-top-btn') as HTMLButtonElement
	const targetHeader = document.getElementById('blog-hero') as HTMLDivElement

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the header is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString()
		})
	}

	scrollBtn.addEventListener('click', () => {
		document.documentElement.scrollTo({ behavior: 'smooth', top: 0 })
	})

	const observer = new IntersectionObserver(callback)
	observer.observe(targetHeader)
</script>
