---
import TOC from '@/components/blog/TOC.astro'
import Button from '@/components/Button.astro'
import type { Config } from '@/types/data'
import FormattedDate from '@/components/FormattedDate.astro'
import ImageSrc from '@/components/ImageSrc.astro'

import PageLayout from './BaseLayout.astro'
import type { PhotographyEntry } from '@/content/config'
import ContentSidePanel from '@/components/blog/ContentSidePanel.astro'
import MetaData from '@/components/blog/MetaData.astro'
import HeroTitle from '@/components/blog/HeroTitle.astro'

interface Props {
	urlRoot: string
	content: PhotographyEntry
	meta?: Config['meta']
}

const { content, meta, urlRoot } = Astro.props
const { headings, remarkPluginFrontmatter } = await content.render()

const pageMeta = {
	...meta,
	description: content.data.description,
	title: content.data.title,
	articleDate: content.data.publishDate.toISOString(),
	ogImage: content.data.ogImage ?? `/og-image/${content.slug}.png`
} as Config['meta']

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: 'long'
}

const sidePanelVisible = !!content.data.meta || !!headings.length
---

<PageLayout meta={pageMeta}>
	<div class='w-full'>
		<Button title='Back' href=`${urlRoot}` style='button'>
			<svg
				xmlns='http://www.w3.org/2000/svg'
				width='14'
				height='14'
				viewBox='0 0 24 24'
				slot='icon-before'
			>
				<path
					fill='currentColor'
					d='m6.921 12.5l5.792 5.792L12 19l-7-7l7-7l.713.708L6.921 11.5H19v1z'
				>
				</path>
			</svg>
		</Button>
		<div class='mt-8 gap-x-10 lg:flex lg:items-start'>
			<ContentSidePanel visible={sidePanelVisible}>
				{!!headings.length && <TOC headings={headings} />}
				{content.data.meta && <MetaData content={content} />}
			</ContentSidePanel>

			<article class='flex-grow break-words' data-pagefind-body>
				<HeroTitle content={content} tagsRoot='/photography' />
				{
					content.data.coverImage && (
						<div class='my-6'>
							<ImageSrc
								alt={content.data.coverImage.alt || ''}
								class='rounded-2xl'
								src={content.data.coverImage.image.src}
							/>
						</div>
					)
				}
				<div
					class='prose prose-base prose-zinc mt-12 text-muted-foreground dark:prose-invert prose-headings:font-medium prose-headings:text-foreground prose-headings:before:absolute prose-headings:before:-ms-4 prose-th:before:content-none'
				>
					<slot />
				</div>
			</article>
		</div>
	</div>
</PageLayout>

<script>
	const scrollBtn = document.getElementById('to-top-btn') as HTMLButtonElement
	const targetHeader = document.getElementById('blog-hero') as HTMLDivElement

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the header is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString()
		})
	}

	scrollBtn.addEventListener('click', () => {
		document.documentElement.scrollTo({ behavior: 'smooth', top: 0 })
	})

	const observer = new IntersectionObserver(callback)
	observer.observe(targetHeader)
</script>
