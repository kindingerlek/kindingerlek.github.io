---
import type { Page } from 'astro'
import { type Config } from '@/types/data'

import Pagination from '@/components/Paginator.astro'
import PageLayout from '@/layouts/BaseLayout.astro'
import ImageSrc from '@/components/ImageSrc.astro'
import TagListRow from '@/components/TagListRow.astro'
import type { ArtworkEntry } from '@/content/config'
import { StringUtils } from '@/utils/string'

interface Props {
	page: Page<ArtworkEntry>
	uniqueTags: string[]
	currentTag?: string | null
}

const { page, uniqueTags, currentTag } = Astro.props

// TODO: change to not get the first item, but to get the type from the URL or something else
const artworkType = page.data[0].slug.split('/')[0]
// const title = `Artworks - ${StringUtils.capitalize(artworkType)}`
const title = `Artworks`

const filteredData = currentTag
	? page.data.filter((item) => item.data.tags?.includes(currentTag))
	: page.data

const meta = {
	description: title,
	title: `Artworks/${StringUtils.capitalize(artworkType)}`
} as Config['meta']

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: `← Previous Posts`,
			url: page.url.prev
		}
	}),
	...(page.url.next && {
		nextUrl: {
			text: `Next Posts →`,
			url: page.url.next
		}
	})
}
---

<PageLayout meta={meta}>
	<div class='w-full'>
		<h1 class='mb-6 mt-5 text-2xl font-bold'>{title}</h1>

		{
			!!uniqueTags.length && (
				<TagListRow
					uniqueTags={uniqueTags}
					currentTag={currentTag}
					allTagsUrl={`/artworks/tags?types=${artworkType}`}
				/>
			)
		}

		{filteredData.length === 0 && <p>No content yet.</p>}
		{
			filteredData.length > 0 && (
				<>
					<div class='grid grid-cols-1 gap-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4'>
						{filteredData.map((p) => (
							<a
								href={`/artworks/${p.slug}/`}
								class='group relative hidden w-full overflow-hidden rounded-sm shadow-md'
								data-slug={p.slug}
								data-type={p.slug.split('/')[0]}
							>
								<div class='relative pb-[100%]'>
									<ImageSrc
										src={p.data.coverImage?.image.src}
										alt={p.data.title}
										class={`absolute inset-0 h-full w-full object-cover duration-500 group-hover:scale-105 group-hover:opacity-80 ${p.data.matureContent ? 'blur-lg' : ''}`}
									/>
									{p.data.matureContent && (
										<span class='absolute inset-0 z-10 flex items-center justify-center text-xs font-bold text-white transition-opacity duration-500 group-hover:opacity-0'>
											MATURE CONTENT
										</span>
									)}
									<div class='absolute inset-0 flex flex-col items-center justify-center bg-black bg-opacity-40 px-4 opacity-0 transition-opacity duration-500 group-hover:opacity-100'>
										<span class='text-sm text-white'>{p.data.title}</span>
									</div>
								</div>
							</a>
						))}
					</div>
					<Pagination {...paginationProps} />
				</>
			)
		}
	</div>
</PageLayout>

<script>
	console.log('test')
	const artworks = document.querySelectorAll('[data-slug]')
	const artworksQueryFilter =
		new URLSearchParams(window.location.search).get('types')?.split(',') || []

	artworks.forEach((artwork) => {
		const slug = artwork.getAttribute('data-slug')
		const type = artwork.getAttribute('data-type')

		if (!slug || !type) return

		if (artworksQueryFilter.length === 0) {
			artwork.classList.remove('hidden')
			return
		}

		if (artworksQueryFilter.includes(type)) {
			artwork.classList.remove('hidden')
		} else {
			artwork.classList.add('hidden')
		}
	})
</script>
