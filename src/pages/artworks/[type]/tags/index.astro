---
import TagsLayout from '@/layouts/TagsLayout.astro'
import ArtworkCollection from '@/collections/artworks'

export async function getStaticPaths() {
	const artworks = await ArtworkCollection.getAll()
	const types = [...new Set(artworks.map((artwork) => artwork.slug.split('/')[0]))]

	return types.map((type) => {
		const typeArtworks = artworks.filter((artwork) => artwork.slug.split('/')[0] === type)
		const tagMap = new Map<string, number>()

		typeArtworks.forEach((artwork) => {
			artwork.data.tags.forEach((tag) => {
				tagMap.set(tag, (tagMap.get(tag) || 0) + 1)
			})
		})

		const typeTags = Array.from(tagMap.entries())
			.sort((a, b) => {
				const tagA = a[0].toLowerCase()
				const tagB = b[0].toLowerCase()
				return tagA > tagB ? 1 : tagA < tagB ? -1 : 0
			})
			.map(([tag, count]) => ({
				tag,
				count
			}))

		return {
			params: { type },
			props: {
				tags: typeTags,
				artworksData: typeArtworks.map((artwork) => ({
					id: artwork.id,
					slug: artwork.slug,
					tags: artwork.data.tags,
					type: artwork.slug.split('/')[0]
				}))
			}
		}
	})
}

interface Props {
	tags: Array<{ tag: string; count: number }>
	artworksData: Array<{
		id: string
		slug: string
		tags: string[]
		type: string
	}>
}

const { tags, artworksData } = Astro.props
const type = Astro.params.type
---

<TagsLayout
	title='Tags'
	description="A list of all the topics I've written about in my posts"
	tags={tags}
	tagUrlPrefix={`/artworks/${type}/tags/`}
/>
<input type='hidden' id='data' value={JSON.stringify(artworksData)} />
<script>
	interface FilteredItem {
		tag: string
		count: number
	}

	interface DataItem {
		id: string
		slug: string
		tags: string[]
		type: string
	}

	const types = new URLSearchParams(window.location.search).get('types')?.split(',') || []

	if (types.length > 0) {
		const dataStr = (document.getElementById('data') as HTMLInputElement).value
		const tagsList = document.getElementById('tags-list') as HTMLUListElement
		const data = JSON.parse(dataStr) as Array<DataItem>

		const filteredItems = data
			.filter((item) => types.some((type) => item.type === type))
			.reduce(
				(acc, item) => {
					item.tags.forEach((tag) => {
						if (!acc[tag]) acc[tag] = { tag, count: 0 }
						acc[tag].count++
					})
					return acc
				},
				{} as Record<string, FilteredItem>
			)

		// if (Object.keys(filteredItems).length === 0) {
		// 	tagsList.innerHTML = '<p>No content yet.</p>'
		// 	return
		// }

		const createTag = ({ tag, count }: FilteredItem) =>
			`
				<li class="flex items-center gap-x-2" data-tag="${tag}" data-count="${count}">
					<a href="/artworks/tags/${tag}/" target="_self" rel="noopener noreferrer" class="flex p-3 h-4 w-fit items-center gap-x-1.5 rounded drop-shadow bg-zinc-200 dark:bg-zinc-800 text-zinc-800 dark:text-zinc-200 transition-all duration-300 ease-in-out hover:bg-zinc-300 dark:hover:bg-zinc-600 text-sm font-medium tracking-wide text-gray-700 dark:text-gray-100">#${tag}</a>
					<span class="inline-block text-neutral-600 dark:text-neutral-400"> ${count} contents </span>
				</li>
			`

		const tags = Object.values(filteredItems)
			.sort((a, b) => {
				const tagA = a.tag.toLowerCase()
				const tagB = b.tag.toLowerCase()
				return tagA > tagB ? 1 : tagA < tagB ? -1 : 0
			})
			.map(createTag)
			.join('')

		tagsList.innerHTML = tags
		document.querySelector('p:has(+ #tags-list)')?.remove()
	}
</script>
